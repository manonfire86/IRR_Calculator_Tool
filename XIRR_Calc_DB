# -*- coding: utf-8 -*-
"""
Created on Tue Nov 17 00:39:06 2020

@author: santana
"""

import pandas as pd
import numpy as np
import os
import datetime as dt
from scipy import optimize


## Aggregate Files in directory

path= r'' #Insert your path here
filesdirectory = os.listdir(path)


files = []
for i in range(len(filesdirectory)):
    if 'CS' in filesdirectory[i]:
        files.append(filesdirectory[i])


trans_db = pd.DataFrame()

for i in files:
    temp = pd.read_excel(path+'\%s' % i)
    trans_db = pd.concat([trans_db,temp])

## Sort by Dates


trans_db = trans_db.sort_values(by=['Settle','Default Identifier'])
trans_db = trans_db[(trans_db['Portfolio']=='TIS') | (trans_db['Portfolio']=='TISM_DT') | (trans_db['Portfolio']=='TISM_DTTREAS')]


## Filters

trans_db = trans_db[~trans_db['Default Identifier'].isnull()]


## XIRR Tools


def secant_method(tol, f, x0):

    x1 = x0*1.1
    while (abs(x1-x0)/abs(x1) > tol):
        x0, x1 = x1, x1-f(x1)*(x1-x0)/(f(x1)-f(x0))
    return x1

def xnpv(rate, cashflows):
    return sum([cf/(1+rate)**((t-cashflows[0][0]).days/365.0) for (t,cf) in cashflows])


def xirr(cashflows, guess=0.1):
    try:
        #return optimize.newton(lambda r: xnpv(r,cashflows),guess)
        return secant_method(0.0001,lambda r: xnpv(r,cashflows),guess)
    except:
        return ""


## DB Features



trans_db = trans_db.reset_index()
trans_db['Amount'] = np.where(trans_db['Amount'].isnull(),0,trans_db['Amount'])
trans_db['Quantity'] = np.where(trans_db['Quantity'].isnull(),0,trans_db['Quantity'])
trans_db['Repo_Flag'] = np.where(trans_db['Default Identifier'].str.contains('Repo')==True,True,False)
trans_db['CUSIP'] = np.where((trans_db['Code']== 'RMD') | (trans_db['Code']=='WD-') | (trans_db['Code']=='MGPMT+') | (trans_db['Repo_Flag']==True),"",trans_db['Default Identifier'])

## Filter
    
CU_EX = [] ## build your filter here

trans_db_filt = trans_db[trans_db['CUSIP']!=""].copy()
trans_db_filt = trans_db_filt[trans_db_filt['Counterparty/Broker']!='Default']
trans_db_filt = trans_db_filt[trans_db_filt['CUSIP'].str.contains('CDS')==False]
trans_db_filt = trans_db_filt[~trans_db_filt['CUSIP'].isin(CU_EX)]

CUSIP_Available = set(trans_db_filt['CUSIP'])
CUSIP_Available = list(CUSIP_Available)

 
## Cashflow Assignment Tool


def cashflowassingment_IRRcalc(CUSIP):
    cf_db = trans_db_filt[trans_db_filt['Default Identifier']==CUSIP][['Price','Settle','Amount','Code','Quantity']]
    if np.sum(cf_db['Quantity'])<=0:
        Ann_IRR = xirr(cf_db[['Settle','Amount']].to_numpy())
        if Ann_IRR == '' or (len(cf_db[cf_db['Code'].str.contains('PAYD')])==0 and len(cf_db[cf_db['Code'].str.contains('IN+')])==0):
            Ann_IRR = np.irr(cf_db['Amount'].to_numpy())
        try:
            BE_IRR = 2*((1+Ann_IRR)**0.5-1)
        except:
            return ""
    else:
        return ""
    return Ann_IRR, BE_IRR,cf_db['Settle'].min(),cf_db['Settle'].max(),cf_db[cf_db['Code']=='BUY']['Amount'].sum(),cf_db.loc[(cf_db['Code']=='SLL') | (cf_db['Code']=='CALL'),['Amount']].astype(float).sum()[0],cf_db.loc[(cf_db['Code']!='BUY') & (cf_db['Code']!='SLL') & (cf_db['Code']!='CALL') & (cf_db['Code']!='SLS') & (cf_db['Code']!='BYC'),['Amount']].astype(float).sum()[0],list(cf_db[(cf_db['Code']=='BUY') | (cf_db['Code']=='SLS')].iloc[[0]]['Price'])[0],list(cf_db[(cf_db['Code']=='SLL') | (cf_db['Code']=='CALL')| (cf_db['Code']=='BYC')| (cf_db['Code']=='DLV')|(cf_db['Code']=='MAT')].iloc[[-1]]['Price'])[0];


## IRR DB

IRR_DB = {}
for i in CUSIP_Available:
    IRR_DB[i] = list(cashflowassingment_IRRcalc(i))
    
IRR_AGG_DB = pd.DataFrame.from_dict(IRR_DB,orient='index')
IRR_AGG_DB = IRR_AGG_DB.reset_index()
IRR_AGG_DB.columns = ['CUSIP','Ann_IRR','BE_IRR','First_CF','Last_CF','Investment_Proceeds','Disposition_Proceeds','CUM_CF','Initial_Buy_Price','Final_Sale_Price']

#cf_db = trans_db_filt[trans_db_filt['Default Identifier']=='60688CAK2'][['Settle','Amount','Code','Quantity']]
#cf_db['Settle'].max()

#IRR_AGG_DB[IRR_AGG_DB['CUSIP']=='989769AB0']

#cashflowassingment_IRRcalc('989769AB0')

## CF Database Iterations

CF_DB_IT= []
CUSIPS_FILT_LIST = []
for i in CUSIP_Available:
    cf_db = trans_db_filt[trans_db_filt['Default Identifier']==i][['Price','Settle','Amount','Code','Quantity']]
    cf_db['CUSIP'] = i
    if np.sum(cf_db['Quantity'])<=0:
        CF_DB_IT.append(cf_db)
        CUSIPS_FILT_LIST.append(i)
    else:
        pass



IRR_AGG_DB_FILT = IRR_AGG_DB[IRR_AGG_DB['CUSIP'].isin(CUSIPS_FILT_LIST)].copy()
#IRR_AGG_DB_FILT[IRR_AGG_DB_FILT['CUSIP']=='989769AB0']
#CF_DB_IT[0]

## Excel File Generator

ExcelWriter = pd.ExcelWriter(r' '+dt.datetime.today().strftime('%m-%d-%Y')+'.xlsx',engine='xlsxwriter') ##insert output path here
IRR_AGG_DB_FILT.to_excel(ExcelWriter,'IRR_DB',index=False)
for i in range(len(CF_DB_IT)):
    CF_DB_IT[i].to_excel(ExcelWriter,'CF Tables',startrow=0,startcol=7*i,index=False)
ExcelWriter.save()
ExcelWriter.close()
